apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    ndkVersion rootProject.ext.ndkVersion

    defaultConfig {
        applicationId "top.canyie.dreamland"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        multiDexEnabled false
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments "-DRIRU_MODULE_VERSION_NAME=$rootProject.ext.versionName",
                        "-DRIRU_NEW_MODULE_API_VERSION=$rootProject.ext.riruNewApiVersion",
                        "-DDREAMLAND_VERSION_CODE=$rootProject.ext.versionCode",
                        '-DANDROID_STL=none' // built-in libcxx introduced exception, so use our own instead
            }
        }
        ndk {
            moduleName "riru_dreamland"
            abiFilters  "arm64-v8a","armeabi-v7a"
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
        }

        release {
            minifyEnabled false // TODO: Enable minify
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.18.1"
        }
    }

    buildFeatures {
        prefab true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'androidx.annotation:annotation:1.1.0'
    // The latest pine not published to online repo yet, just direct use aar
    //implementation 'top.canyie.pine:core:0.2.5'
    //implementation 'top.canyie.pine:xposed:0.0.8'
    //implementation 'top.canyie.pine:enhances:0.0.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'dev.rikka.tools.refine:runtime:3.0.3'
    implementation 'dev.rikka.ndk.thirdparty:cxx:1.2.0'
    implementation "io.github.vvb2060.ndk:dobby:1.2"
    compileOnly project(':hiddenapi-stubs')
    testImplementation 'junit:junit:4.12'
    //androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    //androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

def moduleProp = [
        id: 'riru_dreamland',
        name: 'Riru - Dreamland',
        author: 'canyie',
        version: rootProject.ext.versionName + "_" + rootProject.ext.versionCode,
        versionCode: rootProject.ext.versionCode,
        description: 'A third-party Xposed framework implementation, supports Android 7.0 ~ 11. Requires module \'Riru\' is installed. Telegram group: @DreamlandFramework, QQ group: 949888394.',
        minMagisk: rootProject.ext.minMagiskVersion,
        api: rootProject.ext.riruApiVersion
]

def tempPath = "$buildDir/intermediates/magisk"
def tempTemplatePath = "$tempPath/template"
def localDir = "$tempPath/local"
def jarName = 'dreamland.jar'
def jarOutputDir = "$tempTemplatePath/system/framework"
def jarOutputPath = "$jarOutputDir/$jarName"
def nativeDir = "$tempTemplatePath/riru/"
def nativeAbiToSystemDirMap = ['armeabi-v7a': 'lib', 'arm64-v8a': 'lib64']
def nativeLibName = 'libriru_dreamland.so'
def releasePath = "$buildDir/outputs/magisk"

afterEvaluate {
    android.applicationVariants.forEach { variant ->
        def variantCapped = variant.name.capitalize()
        def variantLowered = variant.name.toLowerCase()
        def zipName = "dreamland-${moduleProp['versionCode']}-${variantLowered}.zip"

        def templateTask = task("copyMagiskTemplate${variantCapped}", type: Copy) {
            dependsOn("assemble$variantCapped")
            from file("$rootDir/template")
            into file(tempTemplatePath)

            inputs.properties moduleProp
            doLast {
                file("$tempTemplatePath/module.prop").withWriter('utf-8') { writer ->
                    moduleProp.each { name, value -> writer.write("$name=$value\n") }
                }

                copy {
                    from file("$rootDir/README.md")
                    into file(tempTemplatePath)
                }
            }
        }

        def nativeTask = task("copyNativeLibs${variantCapped}") {
            dependsOn("copyMagiskTemplate$variantCapped")
            def stripTask = tasks.findByName("strip${variantCapped}DebugSymbols")
            doLast {
                stripTask.outputs.files.each { baseInputDir ->
                    nativeAbiToSystemDirMap.each { origin, to ->
                        copy {
                            from file("$baseInputDir/lib/$origin/$nativeLibName")
                            into file("$nativeDir/$to")
                        }
                    }
                }
            }

            outputs.upToDateWhen { stripTask.state.upToDate && file(nativeDir).exists() }
        }

        def jarTask = task("jarClassesDex${variantCapped}") {
            dependsOn("copyNativeLibs$variantCapped")
            def mergeDexTask = tasks.findByName("mergeDex${variantCapped}")
            doLast {
                copy {
                    from mergeDexTask.outputs.files
                    into file(jarOutputDir)
                    rename 'classes.dex', 'dreamland.jar'
                }
            }

            outputs.upToDateWhen { mergeDexTask.state.upToDate && file(jarOutputPath).exists() }
        }

        def zipTask = task("zipMagiskFiles${variantCapped}", type: Zip) {
            dependsOn("jarClassesDex$variantCapped")
            from file(tempTemplatePath)
            destinationDir file(releasePath)
            archiveName zipName
            outputs.upToDateWhen { templateTask.state.upToDate && nativeTask.state.upToDate && jarTask.state.upToDate }
        }

        task("assembleMagisk${variantCapped}") {
            dependsOn("zipMagiskFiles${variantCapped}")
            outputs.upToDateWhen { zipTask.state.upToDate }
        }
    }
}
